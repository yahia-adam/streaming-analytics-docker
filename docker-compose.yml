services:
  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - engnetwork

  kafka:
    image: wurstmeister/kafka
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "yelp-topic-review:3:1"
      # Performance and timeout settings
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
      KAFKA_REQUEST_TIMEOUT_MS: 300000
      # JVM heap settings
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - engnetwork

  producer:
    build:
      context: ./Producer
      dockerfile: Dockerfile
    ports:
      - "4040:4040"
    depends_on:
      - kafka
    environment:
      KAFKA_HOST: "kafka:9092"
      DATASET_PATH: /app/data/
    volumes:
      - ./yelp_dataset:/app/data/
    networks:
      - engnetwork

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    networks:
      - dbNetwork
      - webNetwork

  consumer:
    build:
      context: ./Consumer
      dockerfile: Dockerfile
    ports:
      - "4041:4040"
    depends_on:
      - producer
      - postgres
    environment:
      DATASET_PATH: /app/data
      KAFKA_HOST: "kafka:9092"
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      SPARK_DRIVER_MEMORY: 2g
      SPARK_EXECUTOR_MEMORY: 2g
      _JAVA_OPTIONS: "-Xms1g -Xmx2g"
    volumes:
      - ./yelp_dataset:/app/data/
    networks:
      - engnetwork
      - dbNetwork

  streamlit:
    build: 
      context: ./DataVisualisation
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    networks:
      - webNetwork

networks:
  # PRIV
  engnetwork:
    driver: bridge
    internal: true
  dbNetwork:
    driver: bridge
    internal: true

  # PUB
  webNetwork:
    driver: bridge

volumes:
  postgres_data:
    name: spark_streaming_postgree_data_volume
